// Simulation of linked selection and selfing
initialize() {
	// run on command line:
	// slim -d project='c("test")' -d N=1000 -d sigma=0.8 -d n=15 -d mu=1e-7 -d min_r=1e-9 -d max_r=1e-7 -d DFE_param=-0.01 -d win_size=2000 -d   num_of_windows_per_chr=20 -d num_of_chr=1 LinkedSelection.slim 
	if (exists("slimgui")){	
      setwd("/home/miguel/Work/Research/2024_LinkedSelection"); // change to appropriate local setting
		defineConstant("project", "test"); // project name: prefix for output files
		defineConstant("N", 1000); // pop size
   	defineConstant("sigma", 0.8); // selfing rate
   	defineConstant("n", 15); // sample size
   	defineConstant("mu", 1e-7); // mutation rate
   	defineConstant("min_r", 1e-9); // minimum recombination rate
   	defineConstant("max_r", 1e-7); // maximum recombination rate
   	defineConstant("DFE_param",  -0.01); // parameter for distribution of fitness effects of new mutations
   	defineConstant("win_size", 2000); // window (gene) size
   	defineConstant("num_of_windows_per_chr", 20); //number of windows in a chromosome
   	defineConstant("num_of_chr", 1); //number of chromosomes (only 1 or 2)
	}
	if (num_of_chr!=1 & num_of_chr!=2) stop("Error: number of chromosomes must be 1 or 2.");    
  	defineConstant("log_interval", 200); // number of generations between logging sumstats (for plotting/checking steady-state)
  	defineConstant("chromosome_size", num_of_windows_per_chr*win_size ); // genome size
  	defineConstant("genome_size", num_of_chr*chromosome_size ); // genome size

	if (num_of_windows_per_chr%2 == 0){
      rates = exp(seq(log(max_r), log(min_r), length=asInteger(num_of_windows_per_chr/2)));
      rates = c(rates, rev(rates));
	}else{
      rates = exp(seq(log(max_r), log(min_r), length=asInteger(num_of_windows_per_chr/2)));
      rates = c(rates, min_r, rev(rates));
	}
   ends = seq(win_size, chromosome_size, 	win_size);
	
   if (num_of_chr ==2){
   	rates = c(rates, 0.5, rates);
   	ends = c(ends, ends[num_of_windows_per_chr-1]+1, ends+chromosome_size);
   }	
	ends= ends-1;

	lines = NULL;
	for (i in seqAlong(rates)){
		mutLine = paste0(ends[i]+1, ", ",
	   	              rates[i], "\n");
      lines = c(lines, mutLine);
   }
   file = paste0(lines);
   file = "ends, rates\n" + file;
   if (!writeFile(project + "_rec_map.txt", file)) stop("Error writing file.");    




	initializeMutationRate(mu);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "e", DFE_param);
	initializeGenomicElementType("g1", c(m1,m2), c(1,2));
	initializeGenomicElement(g1, 0, genome_size-1);
	initializeRecombinationRate(rates, ends);
	
	defineConstant("RSCRIPT", "/usr/bin/Rscript");
}

// start population
1 early() {
	sim.addSubpop("p1", N);
	p1.setSelfingRate(sigma);
	
	community.rescheduleScriptBlock(s1, 20*N, 20*N);
	
	if (exists("slimgui")){
		defineConstant("pngPath", writeTempFile("plot_", ".png", ""));
		slimgui.openDocument(pngPath);
	} 
}
1: late(){
	if (exists("slimgui") & (sim.cycle==1 | sim.cycle % log_interval == 0)){
   	pi_n = -log(calcHeterozygosity(p1.genomes, sim.mutationsOfType(m1)));
   	pi_s = -log(calcHeterozygosity(p1.genomes, sim.mutationsOfType(m2)));
		
		pi_n_t = c(sim.getValue("pi_n_trajectory"), pi_n);
		sim.setValue("pi_n_trajectory", pi_n_t);
		pi_s_t = c(sim.getValue("pi_s_trajectory"), pi_s);
		sim.setValue("pi_s_trajectory", pi_s_t);
		rstr = paste('{',
		'x <- (1:' + size(pi_n_t) + ')',
		'y1 <- c(' + paste(pi_n_t, sep=", ") + ')',
		'y2 <- c(' + paste(pi_s_t, sep=", ") + ')',
		'png("' + pngPath + '", width=10, height=10, units="in", res=72)',
		'plot(x=x*' + log_interval + ', y=y1, xlim=c(0, ' + 20*N +' ), ylim=c(5, 20), type="l", xlab="time", ylab="pi", col="blue")',
		'lines(x=x*' + log_interval + ', y=y2, col="red")',
		'dev.off()',
		'}', sep="\n");
		scriptPath = writeTempFile("plot_", ".R", rstr);
		system(RSCRIPT, args=scriptPath);
	}
}


s1 2 early()
{
   samples_genomes = sample(p1.genomes, n);
	lines = NULL;
	for (mut in sim.mutations)		{
	   if (samples_genomes.mutationCountsInGenomes(mut)!=0){
			mutLine = paste0(mut.position, ", ",
		   	              mut.mutationType,  ", ",
			                 mut.selectionCoeff,  ", ",
			                 samples_genomes.mutationCountsInGenomes(mut), "\n");
	      lines = c(lines, mutLine);
	   }
   }
   file = paste0(lines);
   file = "position, type, selection_coeff, count_in_sample\n" + file;
   if (!writeFile(project + "_data.txt", file)) stop("Error writing file.");    

   //print(sim.getValue("history"));
	sim.simulationFinished();
}